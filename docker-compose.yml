version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: microservices-postgres
    environment:
      POSTGRES_DB: microservices_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: trd123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    ports:
      - "6380:6379"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: .
      dockerfile: apps/user-service/Dockerfile
    container_name: user-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=trd123
      - DB_NAME=microservices_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  order-service:
    build:
      context: .
      dockerfile: apps/order-service/Dockerfile
    container_name: order-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=trd123
      - DB_NAME=microservices_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: api-gateway
    environment:
      - API_GATEWAY_PORT=3000
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=3001
      - ORDER_SERVICE_HOST=order-service
      - ORDER_SERVICE_PORT=3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=trd123
      - DB_NAME=microservices_db
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRES_IN=24h
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_started
      order-service:
        condition: service_started
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  microservices-network:
    driver: bridge