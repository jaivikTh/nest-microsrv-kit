{"openapi":"3.0.0","paths":{"/users":{"post":{"operationId":"UserController_createUser","summary":"Create a new user","description":"Creates a new user with the provided name and email address. The email must be unique across all users.","parameters":[],"requestBody":{"required":true,"description":"User data for creation","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUserDto"},"examples":{"example1":{"summary":"Basic user creation","description":"Example of creating a new user","value":{"name":"John Doe","email":"john.doe@example.com"}}}}}},"responses":{"201":{"description":"User successfully created","example":{"id":1,"name":"John Doe","email":"john.doe@example.com","createdAt":"2025-07-18T07:53:59.561Z","updatedAt":"2025-07-18T07:53:59.561Z"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponseDto"},"example":{"id":1,"name":"John Doe","email":"john.doe@example.com","createdAt":"2025-07-18T07:53:59.561Z","updatedAt":"2025-07-18T07:53:59.561Z"}}}},"400":{"description":"Invalid input data or validation failed","example":{"statusCode":400,"message":["name should not be empty","email must be an email"],"error":"Bad Request"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidationErrorResponseDto"},"example":{"statusCode":400,"message":["name should not be empty","email must be an email"],"error":"Bad Request"}}}},"409":{"description":"Email already exists","example":{"statusCode":409,"message":"Email already exists","error":"Conflict"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConflictErrorResponseDto"},"example":{"statusCode":409,"message":"Email already exists","error":"Conflict"}}}},"500":{"description":"Internal server error","example":{"statusCode":500,"message":"Internal server error","error":"Internal Server Error"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"},"example":{"statusCode":500,"message":"Internal server error","error":"Internal Server Error"}}}}},"tags":["Users"]},"get":{"operationId":"UserController_getUsers","summary":"Get all users","description":"Retrieves a list of all users in the system. Returns an empty array if no users exist.","parameters":[],"responses":{"200":{"description":"List of users retrieved successfully","example":[{"id":1,"name":"John Doe","email":"john.doe@example.com","createdAt":"2025-07-18T07:53:59.561Z","updatedAt":"2025-07-18T07:53:59.561Z"}],"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/UserResponseDto"}},"example":[{"id":1,"name":"John Doe","email":"john.doe@example.com","createdAt":"2025-07-18T07:53:59.561Z","updatedAt":"2025-07-18T07:53:59.561Z"}]}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Users"]}},"/users/{id}":{"get":{"operationId":"UserController_getUser","summary":"Get user by ID","description":"Retrieves a specific user by their unique identifier.","parameters":[{"name":"id","required":true,"in":"path","description":"The unique identifier of the user","schema":{"minimum":1}}],"responses":{"200":{"description":"User retrieved successfully","example":{"id":1,"name":"John Doe","email":"john.doe@example.com","createdAt":"2025-07-18T07:53:59.561Z","updatedAt":"2025-07-18T07:53:59.561Z"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponseDto"},"example":{"id":1,"name":"John Doe","email":"john.doe@example.com","createdAt":"2025-07-18T07:53:59.561Z","updatedAt":"2025-07-18T07:53:59.561Z"}}}},"400":{"description":"Invalid user ID format","example":{"statusCode":400,"message":"Validation failed (numeric string is expected)","error":"Bad Request"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidationErrorResponseDto"},"example":{"statusCode":400,"message":"Validation failed (numeric string is expected)","error":"Bad Request"}}}},"404":{"description":"User not found","example":{"statusCode":404,"message":"User not found","error":"Not Found"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFoundErrorResponseDto"},"example":{"statusCode":404,"message":"User not found","error":"Not Found"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Users"]},"put":{"operationId":"UserController_updateUser","summary":"Update user by ID","description":"Updates an existing user with the provided data. Only provided fields will be updated.","parameters":[{"name":"id","required":true,"in":"path","description":"The unique identifier of the user to update","schema":{"minimum":1}}],"requestBody":{"required":true,"description":"User data for update (partial)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUserDto"},"examples":{"updateName":{"summary":"Update only name","value":{"name":"John Smith"}},"updateEmail":{"summary":"Update only email","value":{"email":"john.smith@newemail.com"}},"updateBoth":{"summary":"Update both fields","value":{"name":"John Smith","email":"john.smith@newemail.com"}}}}}},"responses":{"200":{"description":"User updated successfully","example":{"id":1,"name":"John Smith","email":"john.smith@newemail.com","createdAt":"2025-07-18T07:53:59.561Z","updatedAt":"2025-07-18T09:30:15.789Z"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponseDto"},"example":{"id":1,"name":"John Smith","email":"john.smith@newemail.com","createdAt":"2025-07-18T07:53:59.561Z","updatedAt":"2025-07-18T09:30:15.789Z"}}}},"400":{"description":"Invalid input data or user ID format","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidationErrorResponseDto"}}}},"404":{"description":"User not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFoundErrorResponseDto"}}}},"409":{"description":"Email already exists","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConflictErrorResponseDto"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Users"]},"delete":{"operationId":"UserController_deleteUser","summary":"Delete user by ID","description":"Permanently deletes a user from the system. This action cannot be undone. All associated orders will also be deleted.","parameters":[{"name":"id","required":true,"in":"path","description":"The unique identifier of the user to delete","schema":{"minimum":1}}],"responses":{"200":{"description":"User deleted successfully","content":{"application/json":{"schema":{"type":"object","properties":{"message":{"type":"string","example":"User deleted successfully"},"deletedCount":{"type":"number","example":1}}}}}},"400":{"description":"Invalid user ID format","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidationErrorResponseDto"}}}},"404":{"description":"User not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFoundErrorResponseDto"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Users"]}},"/orders":{"post":{"operationId":"OrderController_createOrder","summary":"Create a new order","description":"\n      Creates a new order for a specific user with product details and amount.\n      \n      **Business Rules:**\n      - User must exist in the system\n      - Amount must be a positive number\n      - Product name is required\n      \n      **Process:**\n      1. Validates input data\n      2. Verifies user exists\n      3. Creates order record in database\n      4. Returns created order with generated ID\n      \n      **Related Operations:**\n      - Use GET /users to find valid user IDs\n      - Use GET /orders/user/{userId} to view user's orders\n    ","parameters":[],"requestBody":{"required":true,"description":"Order data for creating a new order","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateOrderDto"},"examples":{"electronics":{"summary":"Electronics order","description":"Creating an order for electronic products","value":{"product":"MacBook Pro 16\"","amount":2499.99,"userId":1}},"books":{"summary":"Book order","description":"Creating an order for books","value":{"product":"Clean Code: A Handbook of Agile Software Craftsmanship","amount":29.99,"userId":2}},"subscription":{"summary":"Subscription order","description":"Creating a subscription order","value":{"product":"Premium Subscription - Annual","amount":99.99,"userId":1}}}}}},"responses":{"201":{"description":"Order successfully created","example":{"id":1,"product":"MacBook Pro 16\"","amount":"2499.99","userId":1,"createdAt":"2025-07-18T07:54:33.277Z","updatedAt":"2025-07-18T07:54:33.277Z"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrderResponseDto"},"example":{"id":1,"product":"MacBook Pro 16\"","amount":"2499.99","userId":1,"createdAt":"2025-07-18T07:54:33.277Z","updatedAt":"2025-07-18T07:54:33.277Z"}}}},"400":{"description":"Validation failed or user does not exist","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidationErrorResponseDto"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Orders"]},"get":{"operationId":"OrderController_getOrders","summary":"Get all orders","description":"\n      Retrieves a list of all orders in the system across all users.\n      \n      **Returns:**\n      - Array of order objects with complete order information\n      - Empty array if no orders exist\n      \n      **Use Cases:**\n      - Admin dashboard order management\n      - Sales reporting and analytics\n      - Order fulfillment processing\n      - System audit and monitoring\n      \n      **Performance Notes:**\n      - Results are not paginated in this version\n      - Consider using user-specific endpoints for better performance\n    ","parameters":[],"responses":{"200":{"description":"List of orders retrieved successfully","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/OrderResponseDto"}}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Orders"]}},"/orders/{id}":{"get":{"operationId":"OrderController_getOrder","summary":"Get order by ID","description":"\n      Retrieves a specific order by its unique identifier.\n      \n      **Parameters:**\n      - id: Order's unique identifier (positive integer)\n      \n      **Returns:**\n      - Complete order information if found\n      - 404 error if order doesn't exist\n      \n      **Use Cases:**\n      - Order details display\n      - Order status checking\n      - Order modification preparation\n      - Customer service inquiries\n    ","parameters":[{"name":"id","required":true,"in":"path","description":"Unique identifier of the order","schema":{"minimum":1}}],"responses":{"200":{"description":"Order found and returned successfully","example":{"id":1,"product":"MacBook Pro 16\"","amount":"2499.99","userId":1,"createdAt":"2025-07-18T07:54:33.277Z","updatedAt":"2025-07-18T07:54:33.277Z"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrderResponseDto"},"example":{"id":1,"product":"MacBook Pro 16\"","amount":"2499.99","userId":1,"createdAt":"2025-07-18T07:54:33.277Z","updatedAt":"2025-07-18T07:54:33.277Z"}}}},"400":{"description":"Invalid order ID format","example":{"statusCode":400,"message":"Validation failed (numeric string is expected)","error":"Bad Request","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/abc"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidationErrorResponseDto"},"example":{"statusCode":400,"message":"Validation failed (numeric string is expected)","error":"Bad Request","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/abc"}}}},"404":{"description":"Order not found","example":{"statusCode":404,"message":"Order with ID 999 not found","error":"Not Found","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/999"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFoundErrorResponseDto"},"example":{"statusCode":404,"message":"Order with ID 999 not found","error":"Not Found","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/999"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Orders"]},"put":{"operationId":"OrderController_updateOrder","summary":"Update order information","description":"\n      Updates an existing order's information. Only provided fields will be updated.\n      \n      **Parameters:**\n      - id: Order's unique identifier\n      \n      **Business Rules:**\n      - Order must exist to be updated\n      - Cannot change the user who placed the order\n      - Amount must be positive if being updated\n      - Product name cannot be empty if being updated\n      \n      **Process:**\n      1. Validates order exists\n      2. Validates input data\n      3. Updates order record\n      4. Returns updated order information\n      \n      **Use Cases:**\n      - Price adjustments\n      - Product name corrections\n      - Order modifications before fulfillment\n    ","parameters":[{"name":"id","required":true,"in":"path","description":"Unique identifier of the order to update","schema":{"minimum":1}}],"requestBody":{"required":true,"description":"Order data to update (partial update supported)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateOrderDto"},"examples":{"updateProduct":{"summary":"Update product only","description":"Update only the product name","value":{"product":"MacBook Pro 14\" (Updated)"}},"updateAmount":{"summary":"Update amount only","description":"Update only the order amount","value":{"amount":2299.99}},"updateBoth":{"summary":"Update both fields","description":"Update both product and amount","value":{"product":"MacBook Pro 14\" (Updated)","amount":2299.99}}}}}},"responses":{"200":{"description":"Order updated successfully","example":{"id":1,"product":"MacBook Pro 14\" (Updated)","amount":"2299.99","userId":1,"createdAt":"2025-07-18T07:54:33.277Z","updatedAt":"2025-07-18T10:15:45.789Z"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrderResponseDto"},"example":{"id":1,"product":"MacBook Pro 14\" (Updated)","amount":"2299.99","userId":1,"createdAt":"2025-07-18T07:54:33.277Z","updatedAt":"2025-07-18T10:15:45.789Z"}}}},"400":{"description":"Validation failed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidationErrorResponseDto"}}}},"404":{"description":"Order not found","example":{"statusCode":404,"message":"Order with ID 999 not found","error":"Not Found","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/999"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFoundErrorResponseDto"},"example":{"statusCode":404,"message":"Order with ID 999 not found","error":"Not Found","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/999"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Orders"]},"delete":{"operationId":"OrderController_deleteOrder","summary":"Delete an order","description":"\n      Permanently deletes an order from the system.\n      \n      **⚠️ Warning:** This action is irreversible.\n      \n      **Parameters:**\n      - id: Order's unique identifier\n      \n      **Business Rules:**\n      - Order must exist to be deleted\n      - Soft delete is not implemented (permanent deletion)\n      - Consider order status before deletion in production\n      \n      **Process:**\n      1. Validates order exists\n      2. Deletes order record\n      3. Returns deletion confirmation\n      \n      **Use Cases:**\n      - Cancel orders before fulfillment\n      - Remove test/duplicate orders\n      - Admin order management\n    ","parameters":[{"name":"id","required":true,"in":"path","description":"Unique identifier of the order to delete","schema":{"minimum":1}}],"responses":{"200":{"description":"Order deleted successfully","content":{"application/json":{"schema":{"type":"object","properties":{"message":{"type":"string","example":"Order deleted successfully"},"deletedOrderId":{"type":"number","example":1},"deletedAt":{"type":"string","format":"date-time","example":"2025-07-18T10:30:45.123Z"}}}}}},"400":{"description":"Invalid order ID format","example":{"statusCode":400,"message":"Validation failed (numeric string is expected)","error":"Bad Request","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/abc"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidationErrorResponseDto"},"example":{"statusCode":400,"message":"Validation failed (numeric string is expected)","error":"Bad Request","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/abc"}}}},"404":{"description":"Order not found","example":{"statusCode":404,"message":"Order with ID 999 not found","error":"Not Found","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/999"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFoundErrorResponseDto"},"example":{"statusCode":404,"message":"Order with ID 999 not found","error":"Not Found","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/999"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Orders"]}},"/orders/user/{userId}":{"get":{"operationId":"OrderController_getUserOrders","summary":"Get orders by user ID","description":"\n      Retrieves all orders placed by a specific user.\n      \n      **Parameters:**\n      - userId: User's unique identifier\n      \n      **Returns:**\n      - Array of orders for the specified user\n      - Empty array if user has no orders\n      - 404 error if user doesn't exist\n      \n      **Use Cases:**\n      - User order history display\n      - Customer account management\n      - Order tracking by customer\n      - User-specific analytics\n      \n      **Business Logic:**\n      - Orders are returned in chronological order (newest first)\n      - Includes all order statuses\n    ","parameters":[{"name":"userId","required":true,"in":"path","description":"Unique identifier of the user whose orders to retrieve","schema":{"minimum":1}}],"responses":{"200":{"description":"User orders retrieved successfully","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/OrderResponseDto"}}}}},"400":{"description":"Invalid user ID format","example":{"statusCode":400,"message":"Validation failed (numeric string is expected)","error":"Bad Request","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/user/abc"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidationErrorResponseDto"},"example":{"statusCode":400,"message":"Validation failed (numeric string is expected)","error":"Bad Request","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/user/abc"}}}},"404":{"description":"User not found","example":{"statusCode":404,"message":"User with ID 999 not found","error":"Not Found","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/user/999"},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFoundErrorResponseDto"},"example":{"statusCode":404,"message":"User with ID 999 not found","error":"Not Found","timestamp":"2025-07-18T07:54:33.277Z","path":"/orders/user/999"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Orders"]}},"/health":{"get":{"operationId":"HealthController_check","summary":"Health check endpoint","description":"\n      Returns the current health status of the API Gateway service.\n      \n      **Purpose:**\n      - Monitor service availability\n      - Load balancer health checks\n      - System monitoring and alerting\n      - Service discovery health verification\n      \n      **Response:**\n      - Always returns 200 OK if the service is running\n      - Includes timestamp for request tracking\n      - Service identifier for multi-service environments\n      \n      **Use Cases:**\n      - Kubernetes liveness/readiness probes\n      - Load balancer health checks\n      - Monitoring system integration\n      - Service mesh health verification\n    ","parameters":[],"responses":{"200":{"description":"Service is healthy and operational","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string","example":"ok","description":"Health status indicator"},"timestamp":{"type":"string","format":"date-time","example":"2025-07-18T07:53:59.561Z","description":"ISO timestamp when health check was performed"},"service":{"type":"string","example":"api-gateway","description":"Service identifier"},"uptime":{"type":"number","example":3600.123,"description":"Service uptime in seconds"},"version":{"type":"string","example":"1.0.0","description":"Service version"}},"required":["status","timestamp","service"]}}}},"500":{"description":"Service is experiencing issues","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerErrorResponseDto"}}}}},"tags":["Health"]}}},"info":{"title":"NestJS Microservices API","description":"\n      A comprehensive microservices architecture built with NestJS, featuring:\n      \n      ## Architecture\n      - **API Gateway**: Central entry point for all client requests\n      - **User Service**: Manages user registration, authentication, and profiles\n      - **Order Service**: Handles order creation, management, and tracking\n      - **Shared Database**: PostgreSQL database shared across all services\n      \n      ## Features\n      - RESTful API design\n      - Input validation and sanitization\n      - Comprehensive error handling\n      - Database relationships and constraints\n      - Microservice communication via TCP\n      \n      ## Getting Started\n      1. Create a user using the POST /users endpoint\n      2. Use the user ID to create orders via POST /orders\n      3. Retrieve user orders using GET /orders/user/{userId}\n      \n      ## Error Handling\n      All endpoints return consistent error responses with appropriate HTTP status codes:\n      - **400**: Bad Request (validation errors)\n      - **404**: Not Found (resource doesn't exist)\n      - **500**: Internal Server Error (system errors)\n    ","version":"1.0.0","contact":{"name":"API Support","url":"https://github.com/your-repo/nestjs-microservices","email":"support@example.com"},"license":{"name":"MIT","url":"https://opensource.org/licenses/MIT"}},"tags":[{"name":"Health","description":"System health and status endpoints"},{"name":"Users","description":"User management operations"},{"name":"Orders","description":"Order management operations"}],"servers":[{"url":"http://localhost:3000","description":"Development server"},{"url":"https://api.example.com","description":"Production server"}],"components":{"schemas":{"CreateUserDto":{"type":"object","properties":{"name":{"type":"string","description":"The name of the user","example":"John Doe","minLength":2},"email":{"type":"string","description":"The email address of the user","example":"john.doe@example.com","format":"email"}},"required":["name","email"]},"UserResponseDto":{"type":"object","properties":{"id":{"type":"number","description":"The unique identifier of the user","example":1},"name":{"type":"string","description":"The name of the user","example":"John Doe"},"email":{"type":"string","description":"The email address of the user","example":"john.doe@example.com"},"createdAt":{"format":"date-time","type":"string","description":"The date when the user was created","example":"2025-07-18T07:53:59.561Z"},"updatedAt":{"format":"date-time","type":"string","description":"The date when the user was last updated","example":"2025-07-18T07:53:59.561Z"}},"required":["id","name","email","createdAt","updatedAt"]},"ValidationErrorResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"HTTP status code","example":400},"message":{"description":"Array of validation error messages","example":["name should not be empty","email must be an email"],"type":"array","items":{"type":"string"}},"error":{"type":"string","description":"Error type","example":"Bad Request"}},"required":["statusCode","message","error"]},"ConflictErrorResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"HTTP status code","example":409},"message":{"type":"string","description":"Error message","example":"Email already exists"},"error":{"type":"string","description":"Error type","example":"Conflict"}},"required":["statusCode","message","error"]},"InternalServerErrorResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"HTTP status code","example":500},"message":{"type":"string","description":"Error message","example":"Internal server error"},"error":{"type":"string","description":"Error type","example":"Internal Server Error"}},"required":["statusCode","message","error"]},"NotFoundErrorResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"HTTP status code","example":404},"message":{"type":"string","description":"Error message","example":"User not found"},"error":{"type":"string","description":"Error type","example":"Not Found"}},"required":["statusCode","message","error"]},"UpdateUserDto":{"type":"object","properties":{"name":{"type":"string","description":"The name of the user","example":"John Smith","minLength":2},"email":{"type":"string","description":"The email address of the user","example":"john.smith@example.com","format":"email"}}},"CreateOrderDto":{"type":"object","properties":{"product":{"type":"string","description":"The name of the product being ordered","example":"MacBook Pro 16\"","minLength":1},"amount":{"type":"number","description":"The amount/price of the order","example":2499.99,"minimum":0.01},"userId":{"type":"number","description":"The ID of the user placing the order","example":1,"minimum":1}},"required":["product","amount","userId"]},"OrderResponseDto":{"type":"object","properties":{"id":{"type":"number","description":"The unique identifier of the order","example":1},"product":{"type":"string","description":"The name of the product being ordered","example":"MacBook Pro 16\""},"amount":{"type":"string","description":"The amount/price of the order","example":"2499.99"},"userId":{"type":"number","description":"The ID of the user who placed the order","example":1},"createdAt":{"format":"date-time","type":"string","description":"The date when the order was created","example":"2025-07-18T07:54:33.277Z"},"updatedAt":{"format":"date-time","type":"string","description":"The date when the order was last updated","example":"2025-07-18T07:54:33.277Z"}},"required":["id","product","amount","userId","createdAt","updatedAt"]},"UpdateOrderDto":{"type":"object","properties":{"product":{"type":"string","description":"The name of the product being ordered","example":"MacBook Pro 14\"","minLength":1},"amount":{"type":"number","description":"The amount/price of the order","example":1999.99,"minimum":0.01}}}}}}